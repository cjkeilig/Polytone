<style>
  #controls {
    max-width:50%;
  }
  .button {
      display: inline-block;
      background: #e2e2e2;
      border: 0;
      line-height: 2.5em;
      padding: 0 0 0 1em;
      margin-bottom: 1em;
      outline: block;
      color: #666;
  }
  .radio {
      display: inline-block;
      background: #e2e2e2;
      border: 0;
      line-height: 2.5em;
      padding: 0 0 0 1em;
      margin-bottom: 1em;
      outline: block;
      color: #666;
  }
  body{
  }
</style>
<script>
      'use strict';
      angular.module("myApp", [])
          .controller("scoreCtrl", function ($scope, $http) {
            
      var formatMeasures = function(measures, mPerLine=5) {
        var newArray = [];
        for(var x=0;x<measures.length;x++) {
          if(x%mPerLine===0) {
            newArray.push("\n" + measures[x]);
          }
          else {
            newArray.push(measures[x]);
          }
        }
        return newArray.join("|");
      }
      function dataURItoBlob(dataURI) {
      // convert base64/URLEncoded data component to raw binary data held in a string
      var byteString;
      if (dataURI.split(',')[0].indexOf('base64') >= 0)
        byteString = atob(dataURI.split(',')[1]);
      else
        byteString = unescape(dataURI.split(',')[1]);

      // separate out the mime component
      var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

      // write the bytes of the string to a typed array
      var ia = new Uint8Array(byteString.length);
      for (var i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
      }
      console.log(ia);
      return new Blob([ia], {type:mimeString});
      }
      var initialServerData = <%if(score.measures.length) { %> <%- JSON.stringify(score.measures) %> <% } else { %> [] <% } %>;
      var serverMeasures = initialServerData.sort(function(a,b) { return a.measureNumber - b.measureNumber}).map(function(a){ return a.measureValue});
      
      $scope.tune = {
        // investigate the weird apostrophe stuff (might involve changing %= to %- 
        title: '<%=score.name%>',
        tempo: <%=score.tempo%>,
        key:   '<%=score.key%>',
        time:  '<%=score.time%>',
        measures : serverMeasures
      }
      
      $scope.abcTune = "T:"+$scope.tune.title+
                       "\nM:"+$scope.tune.time+
                       "\nL:1/8"+
                       "\nK:"+$scope.tune.key + formatMeasures($scope.tune.measures) + "|";
      $scope.abcTune2 = "";
      
      $scope.tuneObjectArray = ABCJS.renderAbc("music", $scope.abcTune,{},{add_classes:true,staffwidth:500},{});
      console.log($scope.abcTune);
      $scope.measureNumber = 0;
      $scope.measureValue = new String("");
      $scope.selected = "create";
      $scope.songtitles = [];
      $scope.songlinks = [];
      $scope.selectedSong = "";
      $scope.searchText = "";
      $scope.chords = {};
      $scope.chord = "";
      $scope.youtubeurl = "";
      io.socket.on('connect', function() {
      io.socket.get('/score/joinRoom/'+<%=score.id%>, function(resData, jwres) {console.log(resData);});
      if (!io.socket.alreadyListeningToMeasures) {
        io.socket.alreadyListeningToMeasures = true;
        io.socket.on('message', function onServerSentEvent (msg) {
    	  console.log(msg);
          // Let's see what the server has to say...
          switch(msg.verb) {
    
            case 'created':
              $scope.tune.measures.push(msg.measure.measureValue);
              $scope.abcTune = "T:"+$scope.tune.title+
                       "\nM:"+$scope.tune.time+
                       "\nL:1/8"+
                       "\nK:"+$scope.tune.key + formatMeasures($scope.tune.measures) + "|";
              console.log($scope.abcTune);
              $scope.tuneObjectArray = ABCJS.renderAbc("music", $scope.abcTune,{},{add_classes:true,staffwidth:500},{});
              
              // (re-render)
              break;
    		    case 'updated':
    		      $scope.tune.measures[msg.measure[0].measureNumber] = msg.measure[0].measureValue;
    		      $scope.abcTune = "T:"+$scope.tune.title+
                       "\nM:"+$scope.tune.time+
                       "\nL:1/8"+
                       "\nK:"+$scope.tune.key + formatMeasures($scope.tune.measures) + "|";
              $scope.tuneObjectArray = ABCJS.renderAbc("music", $scope.abcTune,{},{add_classes:true,staffwidth:500},{});
    			    // handle update
					console.log($scope.abcTune);
    			    break;
    			  case 'destroyed':
    			    $scope.tune.measures.splice(msg.measureNumber,1);
    			    $scope.abcTune = "T:"+$scope.tune.title+
                       "\nM:"+$scope.tune.time+
                       "\nL:1/8"+
                       "\nK:"+$scope.tune.key + formatMeasures($scope.tune.measures) + "|";
              $scope.tuneObjectArray = ABCJS.renderAbc("music", $scope.abcTune,{},{add_classes:true,staffwidth:500},{});
			  console.log($scope.abcTune);
    			    break;
            default: return; // ignore any unrecognized messages
          }
        });
      }
    });
      $scope.toSoundCloud = function () {
      }
      $scope.search = function() {
        // Simple GET request example:
        $('.fa-spinner').show();
        $('.fa-spinner').addClass('fa-spin');
        $http({
          method: 'GET',
          url: '/score/search?title=' + $scope.searchText
        }).then(function successCallback(response) {
          console.log(response.data.muse.titles2);
          console.log(response.data.rudy.titles);
          var tits = [];
          var links = [];
          tits = response.data.muse['titles2'].concat(response.data.rudy['titles']);
          links = response.data.muse['links2'].concat(response.data.rudy['links']);
          $scope.songtitles = tits;
          $scope.songlinks = links;
    
          $('.fa-spinner').hide();
          $('.fa-spinner').removeClass('fa-spin');
        }, function errorCallback(response) {
          console.log(response);
        });
      }
      $scope.rudyRuckerApi = function() {
        
        var link = $scope.songlinks[$scope.songtitles.indexOf($scope.selectedSong)];
        if(link.startsWith('http://static.musescore.com')) {
          $http({
            method: 'GET',
            url: '/score/museScore?link=' + encodeURIComponent(link)
          }).then(function successCallback(response){
            console.log(response);
            $scope.abcTune2 = response.data;
            ABCJS.renderAbc('music2', $scope.abcTune2,{},{add_classes:true,staffwidth:500},{});
          });
        } else {
          $http({
            method: 'GET',
            url: '/score/selectFromApi?selected=' + encodeURIComponent(link)
            }).then(function successCallback(response) { 
              $scope.abcTune2 = response.data.abc;
              console.log(response);
              ABCJS.renderAbc('music2', $scope.abcTune2,{},{add_classes:true,staffwidth:500},{});
            });
        }
      }
      $scope.renderMidi2 = function () {
        var tuneObjectArray2 = ABCJS.renderMidi('midi2',$scope.abcTune2, {},{generateInline:true, generateDownload:true},{});
      }
      $scope.renderMidi = function() {
        var tuneObjectArray = ABCJS.renderMidi('midi',$scope.abcTune, {},{generateInline:true, generateDownload:true},{});
        var otherTune = $scope.tuneObjectArray[0];
        var output = document.getElementById('music');
        var tuneObject = tuneObjectArray[0];
        $('.abcjs-midi-start').click(function() { 
          ABCJS.startAnimation(output, otherTune, {hideFinishedMeasures:false,showCursor:true,bpm:100});
          for(var chor= 0; chor<$scope.chords.length; chor++) {
            
            var nextTime = 0;
            if(chor<$scope.chords.length-1) {
              nextTime = $scope.chords[chor+1].time;
              
            }
            
            setTimeout(function(theChord, next) {
              
              $scope.chord = theChord.chord;
              $scope.$apply();
              
            },$scope.chords[chor].time*1000, $scope.chords[chor], nextTime);
          
          
         }
        });
        
        var blob = dataURItoBlob($('.download-midi a').attr('href'));
        var fd = new FormData(document.forms[0]);
        var xhr = new XMLHttpRequest();

        fd.append('myFile.mid', blob);
        xhr.open('POST', '/score/convertMidi', true);
        
        xhr.onload = function (oEvent) {
      
          var text = xhr.response.slice(10);
          text = text.substring(0, text.length-1);
          text = text.split('\\');
          text = text.join('');
          console.log(JSON.parse(text));
          $scope.chords = JSON.parse(text).chords_result.chords;// Note: not oReq.responseText
        };
        xhr.send(fd);
      }
      $scope.foct = function () {
        
        var file = $('#myfile')[0].files[0];
       /* if($scope.youtubeurl && file) {
          console.log("you cannot do both at the same time");
          return;
        }*/
        var loc;
        if(file) {
        var fd = new FormData(document.forms[1]);
        fd.append('myfile', file);
        loc = '/score/upload';
        }
        else {
        loc = '/measure/upload/?url=' + encodeURIComponent($scope.youtubeurl);
        }
        
        var xhr = new XMLHttpRequest();

        xhr.open('POST', loc, true);
        xhr.onload = function(oEvent) {
          $scope.abcTune2 = JSON.parse(xhr.response);
          
          ABCJS.renderAbc('music2',$scope.abcTune2,{},{add_classes:true,staffwidth:500},{});
        }
        if(file) {
            xhr.send(fd);
        } else {
          xhr.send();
        }
        
  
      }
      $scope.getYoutube = function() {
        io.socket.post('/measure/upload', {url:$scope.youtubeurl} , function(resData, jwRes) {
          console.log(resData);
        })
      }
      $scope.kickoff = function() {
        console.log($scope.selected);
        switch($scope.selected) {
          case 'create':
            $scope.create();
            break;
          case 'update':
            $scope.update();
            break;
          case 'destroy':
            $scope.destroy();
            break;
        }
        
      }
      $scope.update = function() {
      	io.socket.post('/measure/update', {owner: <%=score.id%>, measureNumber: $scope.measureNumber-1, measureValue: $scope.measureValue }, function (resData, jwRes) {
    	  });
    
      }
      $scope.create = function() {
      	io.socket.post('/measure/create', {owner: <%=score.id%>, measureNumber: $scope.tune.measures.length, measureValue: $scope.measureValue}, function (resData, jwRes) {
      	});
      }
      $scope.destroy = function() {
        io.socket.post('/measure/destroy', {owner: <%=score.id%>, measureNumber: $scope.measureNumber-1}, function(resData, jwRes) {
        });
      };
    });
</script>
<div ng-app="myApp" ng-controller="scoreCtrl">
<div id="apiside" style="float:right;max-width:50%;">
  <div id="midi2"></div>
  <div id="warnings2"></div>
  <div id="music2"></div>
  <div id="paper02"></div>
  <div id="paper12"></div>
  <div id="paper22"></div>
  <div id="paper32"></div>
</div>
<div id="mainEditor" style="max-width:40%;">
<div id="midi"></div>
<div id="warnings"></div>
<div id="music"></div>
<div id="paper0"></div>
<div id="paper1"></div>
<div id="paper2"></div>
<div id="paper3"></div>
</div>

<div id="controls" style="margin-left:10px;float:left;">
    <ul class="nav nav-tabs">
    <li class="active"><a href="#manual" data-toggle="tab">Edit</a></li>
    <li><a href="#inspiration" data-toggle="tab">Browse</a></li>
    <li><a href="#upload" data-toggle="tab">Upload</a></li>
    </ul>
    <br>
  
  
  <div class="tab-content clearfix">
   <div id="manual" class="tab-pane active">
        Create<input type="radio" ng-model="selected" name="action" value="create" id="create">
        
        Update<input type="radio" ng-model="selected" name="action" value="update" id="update">
        
        Destroy<input type="radio" ng-model="selected" name="action" value="destroy" id="destroy">
        
      Measure Number<input type="number" ng-disabled="selected==='create'" ng-model="measureNumber" id="measureNumber" required>
      
      Measure Value<input type="text" ng-disabled="selected==='destroy'" ng-model="measureValue" id="measureValue" required>
       <button ng-click="kickoff()">Go</button><br>
    </div>

    <div class="tab-pane" id="inspiration">
      Look for Inspiration<input type="text" id="searchText" ng-model="searchText">
    
      <button ng-click="search()">Search</button>
      <i class="fa fa-spinner" style="display:none" style="font-size:24px"></i><br>
      <select ng-model="selectedSong" ng-options="x for x in songtitles" ng-show="songtitles.length>0"></select>
      <input type="submit" ng-click="rudyRuckerApi()">
    </div>
    <div class="tab-pane" id="upload">
      <input type="file" name="myfile" id="myfile" accept="audio/mp3">
      <input type="text" ng-model="youtubeurl">
      <button ng-click="getYoutube()">Submit</button>
    </div>
    </div>
   <br>
   <br>
   <br>
      <button type="button" ng-click="renderMidi()">Listen to MIDI</button>
      <button type="button" ng-click="renderMidi2()">Listen to MIDI2</button>
      <br><br>
       
      <!-- <a href="/score/yt">Get music from a Youtube video</a> -->
    <div id="chord">
  <h3>{{ chord }}</h3>
</div>
<footer><div id="timer"></div><a href="http://abcnotation.com/wiki/abc:standard:v2.1" target="_blank">Learn how ABC notation works, ABC documentation</a></footer></div>  
</div>

