<script>
      'use strict';
      //below is client side js from soundlcoud. will be used when soundcloud gets back with our client id access
      //<script src="https://connect.soundcloud.com/sdk/sdk-3.1.2.js">
      //SC.initialize({
      //  client_id: 'YOUR_CLIENT_ID',
      //  redirect_uri: 'http://example.com/callback'
      //});
      // initiate auth popup
      //SC.connect().then(function() {
      //  return SC.get('/me');
      //}).then(function(me) {
      //alert('Hello, ' + me.username);
      // });
       
      // Upload to SoundCloud
      // When you have recorded a song with the SDK or any Web Audio application,
      // you can upload it if it's in a format that is accepted
      //SC.upload({
      // file: theBlob, // a Blob of your WAV, MP3...
      //  title: 'This is my sound'
      //});
      
      
      angular.module("myApp", [])
          .controller("scoreCtrl", function ($scope, $http) {
            
      var formatMeasures = function(measures, mPerLine=5) {
        var newArray = [];
        for(var x=0;x<measures.length;x++) {
          if(x%mPerLine===0) {
            newArray.push("\n" + measures[x]);
          }
          else {
            newArray.push(measures[x]);
          }
        }
        return newArray.join("|");
      }
      function dataURItoBlob(dataURI) {
      // convert base64/URLEncoded data component to raw binary data held in a string
      var byteString;
      if (dataURI.split(',')[0].indexOf('base64') >= 0)
        byteString = atob(dataURI.split(',')[1]);
      else
        byteString = unescape(dataURI.split(',')[1]);

      // separate out the mime component
      var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

      // write the bytes of the string to a typed array
      var ia = new Uint8Array(byteString.length);
      for (var i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
      }
      console.log(ia);
      return new Blob([ia], {type:mimeString});
      }
      var initialServerData = <%if(score.measures.length) { %> <%- JSON.stringify(score.measures) %> <% } else { %> [] <% } %>;
      var serverMeasures = initialServerData.sort(function(a,b) { return a.measureNumber - b.measureNumber}).map(function(a){ return a.measureValue});
      
      $scope.tune = {
        // investigate the weird apostrophe stuff (might involve changing %= to %- 
        title: '<%=score.name%>',
        tempo: <%=score.tempo%>,
        key:   '<%=score.key%>',
        time:  '<%=score.time%>',
        measures : serverMeasures
      }
      
      $scope.abcTune = "T:"+$scope.tune.title+
                       "\nM:"+$scope.tune.time+
                       "\nL:1/8"+
                       "\nK:"+$scope.tune.key + formatMeasures($scope.tune.measures) + "|";
      $scope.abcTune2 = "";
      
      $scope.tuneObjectArray = ABCJS.renderAbc("music", $scope.abcTune,{},{add_classes:true},{});
      console.log($scope.abcTune);
      $scope.measureNumber = 0;
      $scope.measureValue = new String("");
      $scope.selected = "create";
      $scope.songtitles = [];
      $scope.songlinks = [];
      $scope.selectedSong = "";
      $scope.searchText = "";
      
      io.socket.on('connect', function() {
      io.socket.get('/score/joinRoom/'+<%=score.id%>, function(resData, jwres) {console.log(resData);});
      if (!io.socket.alreadyListeningToMeasures) {
        io.socket.alreadyListeningToMeasures = true;
        io.socket.on('message', function onServerSentEvent (msg) {
    	  console.log(msg);
          // Let's see what the server has to say...
          switch(msg.verb) {
    
            case 'created':
              $scope.tune.measures.push(msg.measure.measureValue);
              $scope.abcTune = "T:"+$scope.tune.title+
                       "\nM:"+$scope.tune.time+
                       "\nL:1/8"+
                       "\nK:"+$scope.tune.key + formatMeasures($scope.tune.measures) + "|";
              console.log($scope.abcTune);
              $scope.tuneObjectArray = ABCJS.renderAbc("music", $scope.abcTune,{},{add_classes:true},{});
              
              // (re-render)
              break;
    		    case 'updated':
    		      $scope.tune.measures[msg.measure[0].measureNumber] = msg.measure[0].measureValue;
    		      $scope.abcTune = "T:"+$scope.tune.title+
                       "\nM:"+$scope.tune.time+
                       "\nL:1/8"+
                       "\nK:"+$scope.tune.key + formatMeasures($scope.tune.measures) + "|";
              $scope.tuneObjectArray = ABCJS.renderAbc("music", $scope.abcTune,{},{add_classes:true},{});
    			    // handle update
					console.log($scope.abcTune);
    			    break;
    			  case 'destroyed':
    			    $scope.tune.measures.splice(msg.measureNumber,1);
    			    $scope.abcTune = "T:"+$scope.tune.title+
                       "\nM:"+$scope.tune.time+
                       "\nL:1/8"+
                       "\nK:"+$scope.tune.key + formatMeasures($scope.tune.measures) + "|";
              $scope.tuneObjectArray = ABCJS.renderAbc("music", $scope.abcTune,{},{add_classes:true},{});
			  console.log($scope.abcTune);
    			    break;
            default: return; // ignore any unrecognized messages
          }
        });
      }
    });
      $scope.toSoundCloud = function () {
        console.log($('.download-midi a').attr('href'));
       // $http({ method: 'POST', url:'/score/convertMidi', data: })
      }
      $scope.search = function() {
        // Simple GET request example:
        $('.fa-spinner').show();
        $('.fa-spinner').addClass('fa-spin');
        $http({
          method: 'GET',
          url: '/score/search?title=' + $scope.searchText
        }).then(function successCallback(response) {
          console.log(response);
          $scope.songtitles = response.data.titles;
          $scope.songlinks = response.data.links;
          $('.fa-spinner').hide();
          $('.fa-spinner').removeClass('fa-spin');
        }, function errorCallback(response) {
        // called asynchronously if an error occurs
        // or server returns response with an error status.
        });
      }
      $scope.selectFromApi = function() {
        var link = $scope.songlinks[$scope.songtitles.indexOf($scope.selectedSong)];
          $http({
            method: 'GET',
            url: '/score/selectFromApi?selected=' + encodeURIComponent(link)
            }).then(function successCallback(response) { 
              $scope.abcTune2 = response.data.abc;
              console.log(response);
              ABCJS.renderAbc('music2', $scope.abcTune2,{},{add_classes:true},{});
            });
  
      }
      $scope.renderMidi = function() {
        var tuneObjectArray = ABCJS.renderMidi('midi',$scope.abcTune, {},{generateInline:true,qpm:100, generateDownload:true},{});
        console.log(tuneObjectArray[0]);
        var otherTune = $scope.tuneObjectArray[0];
        var output = document.getElementById('music');
        var tuneObject = tuneObjectArray[0];
        console.log($('.download-midi a').attr('href'));
        $('.abcjs-midi-start').click(function() { ABCJS.startAnimation(output, otherTune, {hideFinishedMeasures:false,showCursor:true,bpm:100})});
        /*
        var blob = dataURItoBlob($('.download-midi a').attr('href'));
        var fd = new FormData(document.forms[0]);
        var xhr = new XMLHttpRequest();

        fd.append('myFile.mid', blob);
        xhr.open('POST', '/score/convertMidi', true);
        xhr.responseType = "arraybuffer";
        xhr.onload = function (oEvent) {
          var arrayBuffer = xhr.response; // Note: not oReq.responseText
          if (arrayBuffer) {
           var byteArray = new Uint8Array(arrayBuffer);
           console.log(byteArray);
           var blob = new Blob([byteArray], {type: 'audio/mp3'});
           console.log(blob);
          }
        };
        xhr.send(fd);
        //$.ajax({
        //  url:'/score/convertMidi',
        //  type:'POST',
        //  data:$('.download-midi a').attr('href'),
        //  contentType:'audio/midi',
        //  success: function successCallback() {
        //  console.log("yay");
        //  }
        //}); */
      }
      $scope.kickoff = function() {
        console.log($scope.selected);
        switch($scope.selected) {
          case 'create':
            $scope.create();
            break;
          case 'update':
            $scope.update();
            break;
          case 'destroy':
            $scope.destroy();
            break;
        }
        
      }
      $scope.update = function() {
      	io.socket.post('/measure/update', {owner: <%=score.id%>, measureNumber: $scope.measureNumber-1, measureValue: $scope.measureValue }, function (resData, jwRes) {
    	  });
    
      }
      $scope.create = function() {
      	io.socket.post('/measure/create', {owner: <%=score.id%>, measureNumber: $scope.tune.measures.length, measureValue: $scope.measureValue}, function (resData, jwRes) {
      	});
      }
      $scope.destroy = function() {
        io.socket.post('/measure/destroy', {owner: <%=score.id%>, measureNumber: $scope.measureNumber-1}, function(resData, jwRes) {
        });
      };
    });
</script>
<div ng-app="myApp" ng-controller="scoreCtrl"</div>
<div id="otherhalf" style="float:right;max-width:50%;">
  <div id="midi2"></div>
  <div id="warnings2"></div>
  <div id="music2"></div>
  <div id="paper02"></div>
  <div id="paper12"></div>
  <div id="paper22"></div>
  <div id="paper32"></div>
</div>
<div id="half">
<div id="midi"></div>
<div id="warnings"></div>
<div id="music"></div>
<div id="paper0"></div>
<div id="paper1"></div>
<div id="paper2"></div>
<div id="paper3"></div>
</div>

<div id="controls">
  <div class="container">
  <div class="row no-gutters">
    <div class="col-sm">
      <div class="form-group">
      <label for="create">Create</label>
      <input type="radio" ng-model="selected" name="action" value="create" id="create">
      </div>
      <div class="form-group">
      <label for="update">Update</label>
      <input type="radio" ng-model="selected" name="action" value="update" id="update">
      </div>
      <div class="form-group">
      <label for="destroy">Destroy</label>
      <input type="radio" ng-model="selected" name="action" value="destroy" id="destroy">
      </div>
    </div>
    <div class="col-sm">
      <div class="form-group">
      <label for="measureNumber">Measure Number</label>
      <input type="number" ng-disabled="selected==='create'" ng-model="measureNumber" id="measureNumber" class="form-control input-sm" required>
      </div>
      <div class="form-group">
      <label for="measureValue">Measure Value</label>
      <input type="text" ng-disabled="selected==='destroy'" ng-model="measureValue" id="measureValue" class="form-control input-sm" required>
      </div>
    </div>
    <div class="col-sm">
      <button class="btn btn-default" ng-click="kickoff()">Go</button><br>
      <div class="form-group">
      <label for="searchText">Look for inspiration</label>
      <input type="text" id="searchText" class="form-control input-sm" ng-model="searchText">
      </div>
      <button class="btn btn-default " ng-click="search()">Search</button>
      <i class="fa fa-spinner" style="display:none" style="font-size:24px"></i><br>
      <select ng-model="selectedSong" ng-options="x for x in songtitles" ng-show="songtitles.length>0"></select>
      <input type="submit" ng-click="selectFromApi()">
      <button type="button" ng-click="renderMidi()">Listen to MIDI</button>
      <button ng-click="toSoundCloud()">Upload to SoundCloud</button>
    </div> <!-- end col -->
  </div> <!-- end row -->
  
  </div>
  </div>
</div>
